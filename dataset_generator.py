# -*- coding: utf-8 -*-
"""Dataset Generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jGM_bkjfHTytpe1CVjV87b-efjfU6g9t

# Dataset Generator
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler, LabelEncoder
import joblib
import warnings
warnings.filterwarnings('ignore')

# Set random seed for reproducibility
np.random.seed(42)

def generate_synthetic_polymer_composite_data(n_samples=500):
    """
    Generate synthetic dataset for polymer composite materials with natural biogenic fillers
    """

    # Define material types
    polymer_matrices = ['Epoxy', 'Polyester', 'Vinyl Ester', 'Phenolic', 'Polyurethane']
    biogenic_fillers = ['Bovine Bone Particles', 'Hydroxyapatite', 'Bamboo Fibers',
                       'Wood Flour', 'Rice Husk', 'Coconut Coir', 'Jute Fibers',
                       'Flax Fibers', 'Hemp Fibers', 'Chitosan Particles']

    # Generate base data
    data = []

    for i in range(n_samples):
        # Material composition
        polymer_matrix = np.random.choice(polymer_matrices)
        filler_type = np.random.choice(biogenic_fillers)

        # Mixing ratio (filler weight percentage: 0-50%)
        filler_ratio = np.random.uniform(0, 50)
        matrix_ratio = 100 - filler_ratio

        # Processing parameters
        curing_temp = np.random.uniform(60, 180)  # °C
        curing_time = np.random.uniform(2, 24)   # hours
        pressure = np.random.uniform(0.1, 10)    # MPa

        # Particle size (for particulate fillers)
        particle_size = np.random.uniform(10, 500)  # μm

        # Generate realistic property relationships
        # Base properties for different polymer matrices
        base_properties = {
            'Epoxy': {'tensile': 70, 'flexural': 120, 'impact': 15, 'thermal_cond': 0.2, 'electrical_res': 1e14},
            'Polyester': {'tensile': 50, 'flexural': 90, 'impact': 12, 'thermal_cond': 0.15, 'electrical_res': 1e13},
            'Vinyl Ester': {'tensile': 80, 'flexural': 130, 'impact': 18, 'thermal_cond': 0.18, 'electrical_res': 1e13},
            'Phenolic': {'tensile': 45, 'flexural': 85, 'impact': 8, 'thermal_cond': 0.25, 'electrical_res': 1e12},
            'Polyurethane': {'tensile': 35, 'flexural': 60, 'impact': 25, 'thermal_cond': 0.3, 'electrical_res': 1e11}
        }

        # Filler effect factors
        filler_effects = {
            'Bovine Bone Particles': {'tensile': 1.4, 'flexural': 1.3, 'impact': 0.8, 'thermal_cond': 2.0, 'electrical_res': 0.1},
            'Hydroxyapatite': {'tensile': 1.5, 'flexural': 1.4, 'impact': 0.7, 'thermal_cond': 2.5, 'electrical_res': 0.05},
            'Bamboo Fibers': {'tensile': 1.8, 'flexural': 1.6, 'impact': 1.2, 'thermal_cond': 1.2, 'electrical_res': 0.8},
            'Wood Flour': {'tensile': 1.2, 'flexural': 1.1, 'impact': 0.9, 'thermal_cond': 1.5, 'electrical_res': 0.5},
            'Rice Husk': {'tensile': 1.1, 'flexural': 1.0, 'impact': 0.8, 'thermal_cond': 1.3, 'electrical_res': 0.3},
            'Coconut Coir': {'tensile': 1.3, 'flexural': 1.2, 'impact': 1.1, 'thermal_cond': 1.1, 'electrical_res': 0.7},
            'Jute Fibers': {'tensile': 1.7, 'flexural': 1.5, 'impact': 1.3, 'thermal_cond': 1.2, 'electrical_res': 0.6},
            'Flax Fibers': {'tensile': 1.9, 'flexural': 1.7, 'impact': 1.4, 'thermal_cond': 1.3, 'electrical_res': 0.4},
            'Hemp Fibers': {'tensile': 1.6, 'flexural': 1.4, 'impact': 1.2, 'thermal_cond': 1.1, 'electrical_res': 0.5},
            'Chitosan Particles': {'tensile': 1.1, 'flexural': 1.0, 'impact': 0.9, 'thermal_cond': 1.4, 'electrical_res': 0.2}
        }

        base_props = base_properties[polymer_matrix]
        filler_props = filler_effects[filler_type]

        # Calculate properties with filler effects
        filler_factor = filler_ratio / 100

        # Mechanical Properties
        tensile_strength = base_props['tensile'] * (1 + filler_factor * (filler_props['tensile'] - 1))
        flexural_strength = base_props['flexural'] * (1 + filler_factor * (filler_props['flexural'] - 1))
        impact_strength = base_props['impact'] * (1 + filler_factor * (filler_props['impact'] - 1))

        # Add process effects
        temp_effect = 1 + (curing_temp - 120) * 0.002
        time_effect = 1 + (curing_time - 8) * 0.01
        pressure_effect = 1 + (pressure - 1) * 0.05

        tensile_strength *= temp_effect * time_effect * pressure_effect
        flexural_strength *= temp_effect * time_effect * pressure_effect
        impact_strength *= temp_effect * time_effect * pressure_effect

        # Thermal Properties
        thermal_conductivity = base_props['thermal_cond'] * (1 + filler_factor * (filler_props['thermal_cond'] - 1))
        glass_transition_temp = np.random.uniform(50, 200)  # °C
        thermal_expansion = np.random.uniform(20, 80)  # ppm/°C

        # Electrical Properties
        electrical_resistivity = base_props['electrical_res'] * (1 + filler_factor * (filler_props['electrical_res'] - 1))
        dielectric_constant = np.random.uniform(2.5, 8.0)
        dielectric_strength = np.random.uniform(15, 50)  # kV/mm

        # Add realistic noise
        noise_factor = 0.1
        tensile_strength += np.random.normal(0, tensile_strength * noise_factor)
        flexural_strength += np.random.normal(0, flexural_strength * noise_factor)
        impact_strength += np.random.normal(0, impact_strength * noise_factor)
        thermal_conductivity += np.random.normal(0, thermal_conductivity * noise_factor)
        electrical_resistivity += np.random.normal(0, electrical_resistivity * noise_factor)

        # Ensure positive values
        tensile_strength = max(tensile_strength, 5)
        flexural_strength = max(flexural_strength, 5)
        impact_strength = max(impact_strength, 1)
        thermal_conductivity = max(thermal_conductivity, 0.05)
        electrical_resistivity = max(electrical_resistivity, 1e8)

        # Density calculation
        density = 1.2 + filler_factor * 0.8  # g/cm³

        data.append({
            'Polymer_Matrix': polymer_matrix,
            'Filler_Type': filler_type,
            'Filler_Ratio_wt%': filler_ratio,
            'Matrix_Ratio_wt%': matrix_ratio,
            'Curing_Temperature_C': curing_temp,
            'Curing_Time_hours': curing_time,
            'Pressure_MPa': pressure,
            'Particle_Size_microns': particle_size,
            'Density_g_cm3': density,
            'Tensile_Strength_MPa': tensile_strength,
            'Flexural_Strength_MPa': flexural_strength,
            'Impact_Strength_J_m': impact_strength,
            'Thermal_Conductivity_W_mK': thermal_conductivity,
            'Glass_Transition_Temp_C': glass_transition_temp,
            'Thermal_Expansion_ppm_C': thermal_expansion,
            'Electrical_Resistivity_Ohm_m': electrical_resistivity,
            'Dielectric_Constant': dielectric_constant,
            'Dielectric_Strength_kV_mm': dielectric_strength
        })

    return pd.DataFrame(data)

# Generate the dataset
print("Generating synthetic polymer composite dataset...")
df = generate_synthetic_polymer_composite_data(500)

# Display basic information
print(f"\nDataset shape: {df.shape}")
print(f"\nFirst 5 rows:")
print(df.head())

print(f"\nDataset info:")
print(df.info())

print(f"\nBasic statistics:")
print(df.describe())

# Check for missing values
print(f"\nMissing values:")
print(df.isnull().sum())

# Save the dataset
df.to_csv('polymer_composite_dataset.csv', index=False)
print("\nDataset saved as 'polymer_composite_dataset.csv'")

# Create visualizations
fig, axes = plt.subplots(2, 2, figsize=(15, 12))

# Distribution of polymer matrices
df['Polymer_Matrix'].value_counts().plot(kind='bar', ax=axes[0,0])
axes[0,0].set_title('Distribution of Polymer Matrices')
axes[0,0].set_xlabel('Polymer Matrix')
axes[0,0].set_ylabel('Count')

# Distribution of filler types
df['Filler_Type'].value_counts().plot(kind='bar', ax=axes[0,1])
axes[0,1].set_title('Distribution of Filler Types')
axes[0,1].set_xlabel('Filler Type')
axes[0,1].set_ylabel('Count')
axes[0,1].tick_params(axis='x', rotation=45)

# Filler ratio distribution
df['Filler_Ratio_wt%'].hist(bins=20, ax=axes[1,0])
axes[1,0].set_title('Distribution of Filler Ratios')
axes[1,0].set_xlabel('Filler Ratio (wt%)')
axes[1,0].set_ylabel('Frequency')

# Tensile strength vs filler ratio
axes[1,1].scatter(df['Filler_Ratio_wt%'], df['Tensile_Strength_MPa'], alpha=0.6)
axes[1,1].set_title('Tensile Strength vs Filler Ratio')
axes[1,1].set_xlabel('Filler Ratio (wt%)')
axes[1,1].set_ylabel('Tensile Strength (MPa)')

plt.tight_layout()
plt.savefig('dataset_visualization.png', dpi=300, bbox_inches='tight')
plt.show()

print("\nDataset generation completed successfully!")